// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //Instruction decoding
    //Instructions follow the following pattenr: “i xx a cccccc ddd jjj”.
    //Where i = 0 for a instructions and i = 1 for c instructions

    //setting A register (load is either a instruction or d1)
    Mux16(a = instruction, b = outALU, sel = instruction[15], out = registerAin);
    Not( in = instruction[15], out = aLoadfromInstruction);
    Or(a = aLoadfromInstruction, b = instruction[5], out=shouldLoadA);
    ARegister(in = registerAin, load = shouldLoadA, out = outA);

    //Inputs to ALU
    Mux16( a = outA, b = inM, sel = instruction[12]], out = outAM);
    ALU( x = outD, y = outAM, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outALU, zr = zr, ng = ng);

    //d register (load is d2)
    And(a = instruction[4], b = instruction[15], out = shouldLoadD);
    DRegister (in = outALU, load = shouldLoadD, out = outD);

    //Program counter
    //if reset then PC(t) = 0
    //elseif jump(t) then PC(t) = A(t-1)
    //Else PC(t) = PC(t-1) + 1

    //First determine jump logic
    Not(in = ng, out = notNeg);
    Not(in = zr, out=notZero);
    And(a = notNeg, b = notZero, out = isPos);
    And(a = isPos, b = instruction[0], out = jumpifPos);
    And(a = zr, b = instruction[1], out = jumpifZero);
    And(a = ng, b = instruction[2], out = jumpifNeg);
    Or(a = jumpifNeg, b = jumpifZero, out = jump0);
    Or(a = jump0, b = jumpifPos, out = jump1);
    And(a = instruction[15], b = jump1, out = shouldJump);
    //Increment is evaluated last so it should always just be true
    PC(in = outA, load = shouldJump, reset = reset, inc = true, out[0..14] = pc);

    //Figure out output pins
    //OutM
    Mux16(a = outALU, b = outALU, sel = false, out = outM);
    //WriteM
    And(a = instruction[3], b = instruction[15], out=writeM);
    //AddressM
    Mux16(a = outA, b = outA, sel = false, out[0..14] = addressM);













}