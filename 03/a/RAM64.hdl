// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in = load, sel = address[0..2], a = Load0, b = Load1, c =Load2, d = Load3, e = Load4, f = Load5, g = Load6, h = Load7);
    RAM8(in = in, load = Load0, address = address[3..5], out = out0);
	RAM8(in = in, load = Load1, address = address[3..5], out = out1);
	RAM8(in = in, load = Load2, address = address[3..5], out = out2);
	RAM8(in = in, load = Load3, address = address[3..5], out = out3);
	RAM8(in = in, load = Load4, address = address[3..5], out = out4);
	RAM8(in = in, load = Load5, address = address[3..5], out = out5);
	RAM8(in = in, load = Load6, address = address[3..5], out = out6);
	RAM8(in = in, load = Load7, address = address[3..5], out = out7);
	Mux8Way16(a = out0, b = out1, c = out2, d = out3, e = out4, f = out5, g = out6, h = out7, sel = address[0..2], out = out);
}